name: Deploy to MonsterASP.NET

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'
  PUBLISH_PATH: './publish'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore Tripmate.sln
      
    - name: Build solution
      run: dotnet build Tripmate.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
      
    - name: Run tests
      run: dotnet test Tripmate.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --collect:"XPlat Code Coverage"
      continue-on-error: true
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: '**/TestResults/**'
        
  publish:
    name: Publish Application
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore Tripmate.sln
      
    - name: Publish API
      run: dotnet publish src/Tripmate.API/Tripmate.API.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --output ${{ env.PUBLISH_PATH }} --no-restore
      
    - name: Copy web.config to publish folder
      run: |
        if [ -f "src/Tripmate.API/web.config" ]; then
          cp src/Tripmate.API/web.config ${{ env.PUBLISH_PATH }}/web.config
          echo "‚úÖ web.config copied successfully"
        else
          echo "‚ö†Ô∏è web.config not found - creating default one"
          cat > ${{ env.PUBLISH_PATH }}/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <location path="." inheritInChildApplications="false">
            <system.webServer>
              <handlers>
                <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
              </handlers>
              <aspNetCore processPath="dotnet"
                          arguments=".\Tripmate.API.dll"
                          stdoutLogEnabled="true"
                          stdoutLogFile=".\Logs\stdout"
                          hostingModel="inprocess">
                <environmentVariables>
                  <environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Production" />
                </environmentVariables>
              </aspNetCore>
              <httpErrors errorMode="Detailed" />
            </system.webServer>
          </location>
        </configuration>
        EOF
        fi
      
    - name: Create logs directory
      run: mkdir -p ${{ env.PUBLISH_PATH }}/Logs
      
    - name: List published files
      run: |
        echo "üì¶ Published files:"
        ls -la ${{ env.PUBLISH_PATH }}
        echo ""
        echo "üìÑ Checking critical files:"
        [ -f "${{ env.PUBLISH_PATH }}/Tripmate.API.dll" ] && echo "‚úÖ Tripmate.API.dll found" || echo "‚ùå Tripmate.API.dll NOT found"
        [ -f "${{ env.PUBLISH_PATH }}/web.config" ] && echo "‚úÖ web.config found" || echo "‚ùå web.config NOT found"
        [ -f "${{ env.PUBLISH_PATH }}/appsettings.json" ] && echo "‚úÖ appsettings.json found" || echo "‚ùå appsettings.json NOT found"
      
    - name: Upload publish artifacts
      uses: actions/upload-artifact@v4
      with:
        name: published-app
        path: ${{ env.PUBLISH_PATH }}
        
  deploy:
    name: Deploy to MonsterASP.NET
    runs-on: ubuntu-latest
    needs: publish
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment:
      name: production
    
    steps:
    - name: Download published artifacts
      uses: actions/download-artifact@v4
      with:
        name: published-app
        path: ${{ env.PUBLISH_PATH }}
        
    - name: List files to deploy
      run: |
        echo "üì¶ Files to be deployed:"
        ls -lah ${{ env.PUBLISH_PATH }}
        echo ""
        echo "üìä Total size:"
        du -sh ${{ env.PUBLISH_PATH }}
        echo ""
        echo "üîç File count:"
        find ${{ env.PUBLISH_PATH }} -type f | wc -l
        
    - name: Install lftp for reliable FTP transfer
      run: sudo apt-get update && sudo apt-get install -y lftp
        
    - name: Deploy to MonsterASP.NET via LFTP
      run: |
        lftp -u ${{ secrets.FTP_USERNAME }},${{ secrets.FTP_PASSWORD }} ${{ secrets.FTP_SERVER }} <<EOF
        set ssl:verify-certificate no
        set ftp:passive-mode on
        set net:timeout 120
        set net:max-retries 5
        set net:reconnect-interval-base 10
        set ftp:sync-mode off
        set file:charset utf-8
        set ftp:charset utf-8
        set ftp:use-mdtm off
        set mirror:set-permissions false
        cd /wwwroot/
        lcd ${{ env.PUBLISH_PATH }}
        mirror --reverse --delete --verbose --parallel=3 --use-cache --no-perms --no-umask
        bye
        EOF
        
    - name: Deploy to MonsterASP.NET via FTP (Fallback)
      if: failure()
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ${{ env.PUBLISH_PATH }}/
        server-dir: /wwwroot/
        port: 21
        protocol: ftp
        log-level: verbose
        dangerous-clean-slate: false
        timeout: 300000
        dry-run: false
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/*.pdb
          **/obj/**
          **/bin/**
          
    - name: Deployment Summary
      if: success()
      run: |
        echo "### ‚úÖ Deployment Completed Successfully! üöÄ" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production (MonsterASP.NET)" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Path:** /wwwroot/" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Configuration:** ${{ env.BUILD_CONFIGURATION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üåê Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Visit: https://tripmate.runasp.net" >> $GITHUB_STEP_SUMMARY
        echo "2. Check Swagger: https://tripmate.runasp.net/swagger" >> $GITHUB_STEP_SUMMARY
        echo "3. If error 500.30, check Logs folder on server" >> $GITHUB_STEP_SUMMARY
        
    - name: Deployment Failed
      if: failure()
      run: |
        echo "### ‚ùå Deployment Failed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Please check the logs above to identify the issue" >> $GITHUB_STEP_SUMMARY
